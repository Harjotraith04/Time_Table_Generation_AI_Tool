# =============================================================================
# TIMETABLE GENERATOR SERVER ENVIRONMENT CONFIGURATION TEMPLATE
# =============================================================================
# Copy this file to .env and update the values according to your environment
# Do not commit the actual .env file to version control
# =============================================================================

# =============================================================================
# SERVER CONFIGURATION
# =============================================================================
# The port on which the server will run
PORT=8000

# The host address for the server
HOST=localhost

# Node environment (development, production, test)
NODE_ENV=development

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================
# MongoDB connection URI for main database
MONGODB_URI=mongodb://localhost:27017/timetable_generator

# MongoDB connection URI for test database (used in test environment)
MONGODB_TEST_URI=mongodb://localhost:27017/timetable_generator_test

# =============================================================================
# JWT AUTHENTICATION CONFIGURATION
# =============================================================================
# Secret key for JWT token signing (CHANGE THIS IN PRODUCTION!)
JWT_SECRET=your-super-secret-jwt-key-change-in-production

# JWT token expiration time (e.g., 24h, 7d, 30m)
JWT_EXPIRES_IN=24h

# =============================================================================
# CLIENT CONFIGURATION
# =============================================================================
# URL of the client application (React app)
CLIENT_URL=http://localhost:5173

# Comma-separated list of allowed CORS origins
CORS_ORIGINS=http://localhost:5173,http://localhost:3000

# =============================================================================
# ALGORITHM CONFIGURATION
# =============================================================================
# Default algorithm to use for timetable generation (genetic, csp, hybrid)
DEFAULT_ALGORITHM=hybrid

# Maximum time for timetable generation in milliseconds (1 hour = 3600000)
MAX_GENERATION_TIME=3600000

# Default population size for genetic algorithm
DEFAULT_POPULATION_SIZE=100

# Default maximum generations for genetic algorithm
DEFAULT_MAX_GENERATIONS=1000

# Maximum number of concurrent timetable generations
MAX_CONCURRENT_GENERATIONS=5

# Enable parallel processing for algorithms (true/false)
ENABLE_PARALLEL_PROCESSING=true

# =============================================================================
# RATE LIMITING CONFIGURATION
# =============================================================================
# Time window for rate limiting in milliseconds (15 minutes = 900000)
RATE_LIMIT_WINDOW_MS=900000

# Maximum number of requests per time window per IP
RATE_LIMIT_MAX_REQUESTS=100

# =============================================================================
# FILE UPLOAD CONFIGURATION
# =============================================================================
# Maximum file size for uploads in bytes (5MB = 5242880)
MAX_FILE_SIZE=5242880

# Comma-separated list of allowed file types for upload
ALLOWED_FILE_TYPES=text/csv,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet

# Directory for storing uploaded files
UPLOAD_DESTINATION=./uploads

# Directory for temporary files
TEMP_DIR=./temp

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================
# Logging level (error, warn, info, debug)
LOG_LEVEL=info

# Enable file logging (true/false)
FILE_LOGGING=true

# Log file path
LOG_FILE=logs/app.log

# Maximum log file size (10m = 10MB)
LOG_MAX_SIZE=10m

# Maximum number of log files to keep
LOG_MAX_FILES=5

# Enable console logging (true/false)
CONSOLE_LOGGING=true

# Enable colorized console output (true/false)
LOG_COLORIZE=true

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================
# Enable Helmet security middleware (true/false)
HELMET_ENABLED=true

# =============================================================================
# EMAIL CONFIGURATION (OPTIONAL)
# =============================================================================
# Enable email functionality (true/false)
EMAIL_ENABLED=false

# SMTP server configuration
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_SECURE=false
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password

# From email address for system emails
FROM_EMAIL=noreply@timetablegenerator.com

# =============================================================================
# REDIS CONFIGURATION (OPTIONAL)
# =============================================================================
# Enable Redis for caching and sessions (true/false)
REDIS_ENABLED=false

# Redis connection URL
REDIS_URL=redis://localhost:6379

# =============================================================================
# PERFORMANCE CONFIGURATION
# =============================================================================
# Enable cluster mode for production (true/false)
CLUSTER_MODE=false

# Number of worker processes (auto, or specific number)
WORKER_PROCESSES=auto

# Enable response compression (true/false)
COMPRESSION_ENABLED=true

# Compression level (1-9, where 9 is maximum compression)
COMPRESSION_LEVEL=6

# Enable caching (true/false)
CACHE_ENABLED=false

# Cache TTL in seconds (300 = 5 minutes)
CACHE_TTL=300

# Maximum cache size (number of items)
CACHE_MAX_SIZE=100

# =============================================================================
# MONITORING CONFIGURATION
# =============================================================================
# Enable health check endpoint (true/false)
HEALTH_CHECK_ENABLED=true

# Health check interval in milliseconds (30000 = 30 seconds)
HEALTH_CHECK_INTERVAL=30000

# Enable metrics collection (true/false)
METRICS_ENABLED=false

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================
# Enable debug mode (true/false)
DEBUG_MODE=false

# Enable API documentation (true/false)
ENABLE_API_DOCS=true

# Enable mock data generation (true/false)
ENABLE_MOCK_DATA=false

# Seed database with sample data on startup (true/false)
SEED_DATABASE=false

# =============================================================================
# VALIDATION CONFIGURATION
# =============================================================================
# Enable strict validation mode (true/false)
VALIDATION_STRICT_MODE=true

# Allow unknown fields in requests (true/false)
ALLOW_UNKNOWN_FIELDS=false

# Strip unknown fields from requests (true/false)
STRIP_UNKNOWN_FIELDS=true

# =============================================================================
# GOOGLE OAUTH CONFIGURATION (OPTIONAL)
# =============================================================================
# Google OAuth Client ID for authentication
GOOGLE_CLIENT_ID=your-google-client-id

# Google OAuth Client Secret
GOOGLE_CLIENT_SECRET=your-google-client-secret

# OAuth redirect URI
GOOGLE_REDIRECT_URI=http://localhost:8000/api/auth/google/callback

# =============================================================================
# SOCKET.IO CONFIGURATION
# =============================================================================
# Enable Socket.IO for real-time updates (true/false)
SOCKET_IO_ENABLED=true

# Socket.IO connection timeout in milliseconds
SOCKET_IO_TIMEOUT=5000

# =============================================================================
# API DOCUMENTATION
# =============================================================================
# The following environment variables correspond to the API endpoints used by the client:
#
# AUTH ENDPOINTS:
# POST /api/auth/register         - User registration
# POST /api/auth/login           - User login
# POST /api/auth/logout          - User logout
# GET  /api/auth/profile         - Get user profile
# PUT  /api/auth/profile         - Update user profile
# PUT  /api/auth/change-password - Change user password
# GET  /api/auth/verify-token    - Verify JWT token
#
# DATA ENDPOINTS:
# GET    /api/data/teachers           - Get teachers list
# POST   /api/data/teachers           - Create new teacher
# GET    /api/data/teachers/:id       - Get specific teacher
# PUT    /api/data/teachers/:id       - Update teacher
# DELETE /api/data/teachers/:id       - Delete teacher
# POST   /api/data/teachers/bulk-import - Bulk import teachers
#
# GET    /api/data/classrooms         - Get classrooms list
# POST   /api/data/classrooms         - Create new classroom
# POST   /api/data/classrooms/bulk-import - Bulk import classrooms
#
# GET    /api/data/courses            - Get courses list
# POST   /api/data/courses            - Create new course
# POST   /api/data/courses/bulk-import - Bulk import courses
#
# GET    /api/data/validate           - Validate data integrity
# GET    /api/data/statistics         - Get data statistics
#
# TIMETABLE ENDPOINTS:
# POST   /api/timetables/generate           - Generate new timetable
# GET    /api/timetables/generate/:id/progress - Get generation progress
# GET    /api/timetables                    - Get timetables list
# GET    /api/timetables/:id                - Get specific timetable
# PATCH  /api/timetables/:id/status         - Update timetable status
# DELETE /api/timetables/:id                - Delete timetable
# POST   /api/timetables/:id/comments       - Add comment to timetable
# GET    /api/timetables/statistics/overview - Get timetable statistics
#
# ALGORITHM ENDPOINTS:
# GET  /api/algorithm/algorithms         - Get available algorithms
# GET  /api/algorithm/constraints        - Get algorithm constraints
# GET  /api/algorithm/optimization-goals - Get optimization goals
# POST /api/algorithm/validate-parameters - Validate algorithm parameters
# POST /api/algorithm/recommend          - Get algorithm recommendations
#
# HEALTH CHECK:
# GET  /api/health                      - Server health check
# =============================================================================
